#!/usr/bin/env node

var Timeline = require('pebble-api');

var UW_API_KEY = process.env.UW_API_KEY;
var uwapi = require('uwapi')(UW_API_KEY);

var MENU_LIMIT = 3;

var menus = {
  date: [],
  name: [],
  lunchTime: [],
  dinnerTime: [],
  lunch: [],
  dinner: []
}

function pushTopicPins() {
  // create a new Timeline object with our API key passed as an environment variable
  var timeline = new Timeline();

  console.log('There are ' + menus.date.length + ' of each menu pin to send.');
  for (var i = 0; i < menus.date.length; i++) {
    console.log('Date iteration: ' + i);
    var numOutlets = menus.name.length / menus.date.length;

    // Clear data from previous pin
    var lunchHeadings = [];
    var lunchParagraphs = [];
    var dinnerHeadings = [];
    var dinnerParagraphs = [];

    for (var j = (i * numOutlets); j < ((i + 1) * numOutlets); j++) {
      lunchHeadings.push(menus.name[j]);
      lunchParagraphs.push(menus.lunch[j]);

      dinnerHeadings.push(menus.name[j]);
      dinnerParagraphs.push(menus.dinner[j]);
    }
    console.log('lunchHeadings: ' + lunchHeadings);
    console.log('lunchParagraphs: ' + lunchParagraphs);
    console.log('dinnerHeadings: ' + dinnerHeadings);
    console.log('dinnerParagraphs: ' + dinnerParagraphs);

    var lunchPin = new timeline.Pin({
      id: 'uwaterloo-lunch-menu-' + menus.date[i],
      time: menus.lunchTime[i],
      layout: new timeline.Pin.Layout({
        type: timeline.Pin.LayoutType.GENERIC_PIN,
        tinyIcon: timeline.Pin.Icon.DINNER_RESERVATION,
        title: 'Lunch Menu',
        headings: lunchHeadings,
        paragraphs: lunchParagraphs
      })
    });
    console.log('Created lunch pin');
    var dinnerPin = new timeline.Pin({
      id: 'uwaterloo-dinner-menu-' + menus.date[i],
      time: menus.dinnerTime[i],
      layout: new timeline.Pin.Layout({
        type: timeline.Pin.LayoutType.GENERIC_PIN,
        tinyIcon: timeline.Pin.Icon.DINNER_RESERVATION,
        title: 'Dinner Menu',
        headings: dinnerHeadings,
        paragraphs: dinnerParagraphs
      })
    });
    console.log('Created dinner pin');

    console.log('Sending lunch pin: ' + JSON.stringify(lunchPin));
    console.log('Sending dinner pin: ' + JSON.stringify(dinnerPin));

    timeline.sendSharedPin(['uwaterloo_lunch_menu'], lunchPin, function (err, body, resp) {
      if(err) {
        console.error(err);
      }
      else {
        console.log('Sent lunch pin');
      }
    });
    timeline.sendSharedPin(['uwaterloo_dinner_menu'], dinnerPin, function (err, body, resp) {
      if(err) {
        console.error(err);
      }
      else {
        console.log('Sent dinner pin');
      }
    });
  }
}

function getMenuData () {
  uwapi.foodservicesMenu().then(function(menuData){
    //console.log('Received ' + JSON.stringify(menuData, null, 2));

    var currentDate = new Date();
    var count = 0;

    menus.date = [];
    menus.name = [];
    menus.lunch = [];
    menus.dinner = [];

    console.log('Number of outlets ' + menuData.outlets.length);
    for (var i = 0; i < 5; i++) {
      console.log('Date Iteration i: ' + i);
      // Get lunch and dinner menu dates from first outlet in the array
      var lunchMenuDate = new Date(menuData.outlets[0].menu[i].date + 'T15:30Z');
      var dinnerMenuDate = new Date(menuData.outlets[0].menu[i].date + 'T21:30Z');

      // Ensure dinner menu is upcoming
      if (count < MENU_LIMIT && dinnerMenuDate.getTime() >= currentDate.getTime()) {
        // Add data to the menus object
        menus.date.push(menuData.outlets[0].menu[i].date);
        menus.lunchTime.push(lunchMenuDate.toISOString());
        menus.dinnerTime.push(dinnerMenuDate.toISOString());

        for (var j = 0; j < menuData.outlets.length; j++) {
          console.log('Outlet Iteration j: ' + j);
          console.log('Outlet Name: ' + menuData.outlets[j].outlet_name);
          // Add data to the menus object
          menus.name.push(menuData.outlets[j].outlet_name);

          var lunchMenu = '';
          var dinnerMenu = '';

          console.log('Number of Products: ' + menuData.outlets[j].menu[i].meals.lunch.length);
          // Format all product names into a single string
          for (var k = 0; k < menuData.outlets[j].menu[i].meals.lunch.length; k++) {
            console.log('Product Iteration k: ' + k);
            if (k == 0) {
              lunchMenu = menuData.outlets[j].menu[i].meals.lunch[k].product_name;
              dinnerMenu = menuData.outlets[j].menu[i].meals.dinner[k].product_name;
              console.log('Added ' + menuData.outlets[j].menu[i].meals.lunch[k].product_name + ' and ' + menuData.outlets[j].menu[i].meals.dinner[k].product_name);
            }
            else {
              lunchMenu += ', ' + menuData.outlets[j].menu[i].meals.lunch[k].product_name;
              dinnerMenu += ', ' + menuData.outlets[j].menu[i].meals.dinner[k].product_name;
              console.log('Added ' + menuData.outlets[j].menu[i].meals.lunch[k].product_name + ' and ' + menuData.outlets[j].menu[i].meals.dinner[k].product_name);
            }
          }
          console.log('Formatted lunch menu: ' + lunchMenu);
          console.log('Formatted dinner menu: ' + dinnerMenu);

          menus.lunch.push(lunchMenu);
          menus.dinner.push(dinnerMenu);
        }
        count++;
      }
      else if (count >= MENU_LIMIT) {
        console.log('Exceeded menu limit, exiting');
        break;
      }
    }
    console.log('Menu Object ' + JSON.stringify(menus, null, 2));
  }, function(err) {
    console.log('Received error ' + err);
  }).then(function() {
    pushTopicPins();
  });
}

getMenuData();