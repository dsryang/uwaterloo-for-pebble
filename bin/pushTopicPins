#!/usr/bin/env node

var Timeline = require('pebble-api');

var UW_API_KEY = process.env.UW_API_KEY;
var uwapi = require('uwapi')(UW_API_KEY);

var MENU_LIMIT = 3;

var menus = {
  date: [],
  name: [],
  lunchTime: [],
  dinnerTime: [],
  lunch: [],
  dinner: []
}

function pushTopicPins() {
  // create a new Timeline object with our API key passed as an environment variable
  var timeline = new Timeline();
  var lunchHeadings = [];
  var lunchParagraphs = [];
  var dinnerHeadings = [];
  var dinnerParagrahps = [];

  for (var i = 0; i < menus.name.length; i++) {
    lunchHeadings.push(menus.name[i]);
    lunchParagraphs.push(menus.lunch[i]);

    dinnerHeadings.push(menus.name[i]);
    dinnerParagraphs.push(menus.dinner[i]);
  }

  console.log('There are ' + menus.date.length + ' of each menu pin to send.');
  for (var i = 0; i < menus.date.length; i++) {
    var lunchPin = new Timeline.Pin({
      id: 'uwaterloo-lunch-menu-' + menus.date[i],
      time: menus.lunchTime[i],
      layout: new Timeline.Pin.Layout({
        type: Timeline.Pin.LayoutType.GENERIC_PIN,
        tinyIcon: Timeline.Pin.Icon.DINNER_RESERVATION,
        title: 'Lunch Menu',
        headings: lunchHeadings,
        paragraphs: lunchParagraphs
      })
    });
    var dinnerPin = new Timeline.Pin({
      id: 'uwaterloo-dinner-menu-' + menus.date[i],
      time: menus.dinnerTime[i],
      layout: new Timeline.Pin.Layout({
        type: Timeline.Pin.LayoutType.GENERIC_PIN,
        tinyIcon: Timeline.Pin.Icon.DINNER_RESERVATION,
        title: 'Dinner Menu',
        headings: dinnerHeadings,
        paragraphs: dinnerParagraphs
      })
    });

    console.log('Sending pin: ' + JSON.stringify(lunchPin));
    console.log('Sending pin: ' + JSON.stringify(dinnerPin));

    timeline.sendSharedPin(['uwaterloo_lunch_menu'], lunchPin, function (err, body, resp) {
      if(err) {
        console.error(err);
      }
      else {
        //res.send('Sent pin: ' + JSON.stringify(lunchPin));
      }
    });
    timeline.sendSharedPin(['uwaterloo_dinner_menu'], dinnerPin, function (err, body, resp) {
      if(err) {
        console.error(err);
      }
      else {
        //res.send('Sent pin: ' + JSON.stringify(dinnerPin));
      }
    });
  }
}

function getMenuData () {
  uwapi.foodservicesMenu().then(function(menuData){
    console.log('Received ' + JSON.stringify(menuData, null, 2));

    var count = 0;

    menus.date = [];
    menus.name = [];
    menus.lunch = [];
    menus.dinner = [];

    console.log('Number of outlets ' + menuData.outlets.length);
    for (var i = 0; i < menuData.outlets.length; i++) {
      var lunchMenuDate = new Date(menuData.outlets[i].menu.date + 'T15:30Z');
      var dinnerMenuDate = new Date(menuData.outlets[i].menu.date + 'T21:30Z');

      // Ensure dinner menu is upcoming
      if (count < MENU_LIMIT && dinnerMenuDate.getTime() >= currentDate.getTime()) {
        menus.date.push(menuData.outlets[i].menu.date);
        menus.lunchTime.push(lunchMenuDate.toISOString());
        menus.dinnerTime.push(dinnerMenuDate.toISOString());
        menus.name.push(menuData.outlets[i].outlet_name);

        var lunchMenu = '';
        var dinnerMenu = '';
        for (var j = 0; j < menuData.outlets[i].menu.meals.lunch.length; j++) {
          if (j == 0) {
            lunchMenu = menuData.outlets[i].menu.meals.lunch[j].product_name;
            dinnerMenu = menuData.outlets[i].menu.meals.dinner[j].product_name;
          }
          else {
            lunchMenu += ', ' + menuData.outlets[i].menu.meals.lunch[j].product_name;
            dinnerMenu += ', ' + menuData.outlets[i].menu.meals.dinner[j].product_name;
          }
        }
        menus.lunch.push(lunchMenu);
        menus.dinner.push(dinnerMenu);
            
        count++;
      }
      else if (count >= MENU_LIMIT) {
        break;
      }
      
      console.log('Menu Object ' + JSON.stringify(menus, null, 2));
    }
  }, function(err) {
    console.log('Received error ' + err);
  });

  pushTopicPins();
}

getMenuData();